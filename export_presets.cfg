[preset.0]

name="HTML5"
platform="HTML5"
runnable=true
custom_features=""
export_filter="all_resources"
include_filter=""
exclude_filter=""
export_path="./index.html"
script_export_mode=1
script_encryption_key=""

[preset.0.options]

custom_template/debug=""
custom_template/release=""
variant/export_type=0
vram_texture_compression/for_desktop=true
vram_texture_compression/for_mobile=false
html/export_icon=true
html/custom_html_shell=""
html/head_include="<script src=\"https://waxjs-file.s3.amazonaws.com/waxjs.js\"></script>
<script src=\"https://unpkg.com/anchor-link@3\"></script>
<script src=\"https://unpkg.com/anchor-link-browser-transport@3\"></script>
<script>
	const wax = new waxjs.WaxJS({rpcEndpoint: 'https://wax.greymass.com'});
	
	async function loginWCW()
	{
		try {
		  const userAccount = await wax.login();
		} catch(e) {
		  console.log(e.message);
		}
		sendTransaction();
	}
	
	async function sendTransaction()
	{
	    try {
	        const result = await wax.api.transact({
													        actions: [{
													            account: 'zombietester',
													            name: 'performtask',
													            authorization: [{
													            actor: wax.userAccount,
													            permission: 'active',
													            }],
													            data: {
													            account: wax.userAccount,
													            assets_id: [],
													            mine_id: 0,
													            mine_type: 0,
													            memo: 'teste3'
													            },
													        }]
													        }, {
													        blocksBehind: 3,
													        expireSeconds: 30
													 });
	    } catch(e) {
	        console.log(e.message);
	    }
	}

        const identifier = 'example';
        const transport = new AnchorLinkBrowserTransport();

        const link = new AnchorLink({
            transport,
            chains: [{
                chainId: '1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4',
                nodeUrl: 'https://wax.greymass.com',
            }]
        })

        let session;

        function loginAnchor() {
            link.login(identifier).then((result) => {
                session = result.session
				transfer();
            })
		}
        
        function transfer() {
		let messagestr = session.auth.actor;
		console.log(messagestr);
		let nouncestr = encrypt(messagestr,\"1d1e3d20cb41879fb3d0fbea009f1538\");
		console.log(nouncestr);
            const action = {
                account: 'zombietester',
                name: 'testnounce',
                authorization: [session.auth],
                data: {
					nounce: nouncestr,
                    account: session.auth.actor
                }
            }
			         session.transact({action}).then((result) => {
                console.log(\"Sucesso no envio da tx\");
            })
		}
		

function encrypt(message, key) {
  let timestamp = Math.floor(Date.now() / 1000);
  let encrypted = [];
  let keyLength = key.length;
  let lastTwoDigits = timestamp % 100;

  for (let i = 0; i < message.length; i++) {
    let asciiValue = message.charCodeAt(i) + key.charCodeAt(i % keyLength);
    encrypted.push(asciiValue);
  }

  for (let i = 0; i < encrypted.length; i++) {
    encrypted[i] += lastTwoDigits;
  }

  let timestampBytes = new Uint8Array(new Int32Array([timestamp]).buffer);
  let encryptedBytes = new Uint8Array(encrypted);
  let result = new Uint8Array(timestampBytes.length + encryptedBytes.length);
  result.set(timestampBytes);
  result.set(encryptedBytes, timestampBytes.length);

  // Convert the byte array to a hex string.
  var hexString = \"\";
  for (var j = 0; j < encryptedBytes.length; j++) {
    var hex = encryptedBytes[j].toString(16);
    if (hex.length < 2) {
      hex = \"0\" + hex;
    }
    hexString += hex;
  }

  return hexString;  
}




   </script>




"
html/canvas_resize_policy=2
html/focus_canvas_on_start=true
html/experimental_virtual_keyboard=false
progressive_web_app/enabled=false
progressive_web_app/offline_page=""
progressive_web_app/display=1
progressive_web_app/orientation=0
progressive_web_app/icon_144x144=""
progressive_web_app/icon_180x180=""
progressive_web_app/icon_512x512=""
progressive_web_app/background_color=Color( 0, 0, 0, 1 )
