[preset.0]

name="HTML5"
platform="HTML5"
runnable=true
custom_features=""
export_filter="all_resources"
include_filter=""
exclude_filter=""
export_path="./index.html"
script_export_mode=1
script_encryption_key=""

[preset.0.options]

custom_template/debug=""
custom_template/release=""
variant/export_type=0
vram_texture_compression/for_desktop=true
vram_texture_compression/for_mobile=false
html/export_icon=true
html/custom_html_shell=""
html/head_include="<script src=\"https://waxjs-file.s3.amazonaws.com/waxjs.js\"></script>
<script src=\"https://unpkg.com/anchor-link@3\"></script>
<script src=\"https://unpkg.com/anchor-link-browser-transport@3\"></script>
<script>

function encrypt(message, key) {
    const encrypted = [];
    const keyLength = key.length;
    
    // Obter o timestamp atual
    const timestamp = 1682082425; // new Date().getTime() / 1000 | 0;
    
    const lastTwoDigits = timestamp % 100;
    
    for (let i = 0; i < message.length; i++) {
    // Transforme cada caractere em seu valor ASCII correspondente e adicione o valor do caractere da chave correspondente.
    const asciiValue = message.charCodeAt(i) + key.charCodeAt(i % keyLength);
    // Adicione o valor do caractere criptografado ao vetor de bytes.
    encrypted.push(asciiValue + lastTwoDigits);
    }
    
    // Adicionar o timestamp e a mensagem criptografada embaralhada ao vetor de bytes criptografado
    const nonce = new Uint8Array(new ArrayBuffer(8));
    const view = new DataView(nonce.buffer);
    view.setUint32(0, timestamp, true);
    encrypted.unshift(...nonce);
    
    // Convert the byte array to a hex string.
    var hexString = \"\";
    for (var j = 0; j < encrypted.length; j++) 
    {
        var hex = encrypted[j].toString(16);
        if (hex.length < 2) 
        {
            hex = \"0\" + hex;
        }
        hexString += hex;
    }
    
    return hexString;  
}
	
        const identifier = 'example1';
        const transport = new AnchorLinkBrowserTransport();

        const link = new AnchorLink({
            transport,
            chains: [{
                chainId: '1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4',
                nodeUrl: 'https://wax.greymass.com',
            }]
        })

        let session;
		var account;

        function loginAnchor() {
            link.login(identifier).then((result) => {
                session = result.session
            })
		}
        
        function transfer() {
			var messagestr = session.auth.actor;
			var nouncestr = encrypt(messagestr.toString(),\"1d1e3d20cb41879fb3d0fbea009f1538\");
			console.log(\"nonce: \" + nouncestr);
			console.log(\"message: \" + messagestr);
	        const action = {
	            account: 'zombietester',
	            name: 'testnounce',
	            authorization: [session.auth],
	            data: {
					nounce: nouncestr,
	                account: session.auth.actor
	            }
	        }
			         session.transact({action}).then((result) => {
                console.log(\"Sucesso no envio da tx\");
            })
		}
		



   </script>




"
html/canvas_resize_policy=2
html/focus_canvas_on_start=true
html/experimental_virtual_keyboard=false
progressive_web_app/enabled=false
progressive_web_app/offline_page=""
progressive_web_app/display=1
progressive_web_app/orientation=0
progressive_web_app/icon_144x144=""
progressive_web_app/icon_180x180=""
progressive_web_app/icon_512x512=""
progressive_web_app/background_color=Color( 0, 0, 0, 1 )
